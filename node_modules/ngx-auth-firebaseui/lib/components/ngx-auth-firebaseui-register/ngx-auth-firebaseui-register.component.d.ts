import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';
import { Subscription } from 'rxjs';
import { AuthProcessService } from '../../services/auth-process.service';
import { MatFormFieldAppearance } from '@angular/material/form-field';
import { ThemePalette } from '@angular/material/core';
import * as ɵngcc0 from '@angular/core';
export declare const confirmPasswordValidator: ValidatorFn;
export declare class NgxAuthFirebaseuiRegisterComponent implements OnInit, OnDestroy {
    private platformId;
    private formBuilder;
    authProcess: AuthProcessService;
    logoUrl: string;
    appearance: MatFormFieldAppearance;
    tosUrl: string;
    privacyPolicyUrl: string;
    titleText: string;
    readAndAcceptText: string;
    termsAndConditionsText: string;
    privacyPolicyText: string;
    createAccountButtonText: string;
    alreadyHaveAccountText: string;
    loginButtonText: string;
    nameText: string;
    nameErrorRequiredText: string;
    emailText: string;
    emailErrorRequiredText: string;
    emailErrorPatternText: string;
    passwordText: string;
    passwordErrorRequiredText: string;
    passwordConfirmationText: string;
    passwordConfirmationErrorRequiredText: string;
    passwordErrorMatchText: string;
    onSuccess: any;
    onError: any;
    onLoginRequested: EventEmitter<void>;
    registerForm: FormGroup;
    onErrorSubscription: Subscription;
    authenticationError: boolean;
    private unsubscribeAll;
    constructor(platformId: Object, formBuilder: FormBuilder, authProcess: AuthProcessService);
    get color(): string | ThemePalette;
    get colorAccent(): string | ThemePalette;
    ngOnInit(): void;
    /**
     * On destroy
     */
    ngOnDestroy(): void;
    createAccount(): Promise<void>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxAuthFirebaseuiRegisterComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxAuthFirebaseuiRegisterComponent, "ngx-auth-firebaseui-register", never, {
    "titleText": "titleText";
    "readAndAcceptText": "readAndAcceptText";
    "termsAndConditionsText": "termsAndConditionsText";
    "privacyPolicyText": "privacyPolicyText";
    "createAccountButtonText": "createAccountButtonText";
    "alreadyHaveAccountText": "alreadyHaveAccountText";
    "loginButtonText": "loginButtonText";
    "nameText": "nameText";
    "nameErrorRequiredText": "nameErrorRequiredText";
    "emailText": "emailText";
    "emailErrorRequiredText": "emailErrorRequiredText";
    "emailErrorPatternText": "emailErrorPatternText";
    "passwordText": "passwordText";
    "passwordErrorRequiredText": "passwordErrorRequiredText";
    "passwordConfirmationText": "passwordConfirmationText";
    "passwordConfirmationErrorRequiredText": "passwordConfirmationErrorRequiredText";
    "passwordErrorMatchText": "passwordErrorMatchText";
    "logoUrl": "logoUrl";
    "appearance": "appearance";
    "tosUrl": "tosUrl";
    "privacyPolicyUrl": "privacyPolicyUrl";
}, {
    "onLoginRequested": "onLoginRequested";
    "onSuccess": "onSuccess";
    "onError": "onError";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWF1dGgtZmlyZWJhc2V1aS1yZWdpc3Rlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LWF1dGgtZmlyZWJhc2V1aS1yZWdpc3Rlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMENBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEF1dGhQcm9jZXNzU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2F1dGgtcHJvY2Vzcy5zZXJ2aWNlJztcbmltcG9ydCB7IE1hdEZvcm1GaWVsZEFwcGVhcmFuY2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgY29uZmlybVBhc3N3b3JkVmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEF1dGhGaXJlYmFzZXVpUmVnaXN0ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgZm9ybUJ1aWxkZXI7XG4gICAgYXV0aFByb2Nlc3M6IEF1dGhQcm9jZXNzU2VydmljZTtcbiAgICBsb2dvVXJsOiBzdHJpbmc7XG4gICAgYXBwZWFyYW5jZTogTWF0Rm9ybUZpZWxkQXBwZWFyYW5jZTtcbiAgICB0b3NVcmw6IHN0cmluZztcbiAgICBwcml2YWN5UG9saWN5VXJsOiBzdHJpbmc7XG4gICAgdGl0bGVUZXh0OiBzdHJpbmc7XG4gICAgcmVhZEFuZEFjY2VwdFRleHQ6IHN0cmluZztcbiAgICB0ZXJtc0FuZENvbmRpdGlvbnNUZXh0OiBzdHJpbmc7XG4gICAgcHJpdmFjeVBvbGljeVRleHQ6IHN0cmluZztcbiAgICBjcmVhdGVBY2NvdW50QnV0dG9uVGV4dDogc3RyaW5nO1xuICAgIGFscmVhZHlIYXZlQWNjb3VudFRleHQ6IHN0cmluZztcbiAgICBsb2dpbkJ1dHRvblRleHQ6IHN0cmluZztcbiAgICBuYW1lVGV4dDogc3RyaW5nO1xuICAgIG5hbWVFcnJvclJlcXVpcmVkVGV4dDogc3RyaW5nO1xuICAgIGVtYWlsVGV4dDogc3RyaW5nO1xuICAgIGVtYWlsRXJyb3JSZXF1aXJlZFRleHQ6IHN0cmluZztcbiAgICBlbWFpbEVycm9yUGF0dGVyblRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZFRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZEVycm9yUmVxdWlyZWRUZXh0OiBzdHJpbmc7XG4gICAgcGFzc3dvcmRDb25maXJtYXRpb25UZXh0OiBzdHJpbmc7XG4gICAgcGFzc3dvcmRDb25maXJtYXRpb25FcnJvclJlcXVpcmVkVGV4dDogc3RyaW5nO1xuICAgIHBhc3N3b3JkRXJyb3JNYXRjaFRleHQ6IHN0cmluZztcbiAgICBvblN1Y2Nlc3M6IGFueTtcbiAgICBvbkVycm9yOiBhbnk7XG4gICAgb25Mb2dpblJlcXVlc3RlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIHJlZ2lzdGVyRm9ybTogRm9ybUdyb3VwO1xuICAgIG9uRXJyb3JTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgICBhdXRoZW50aWNhdGlvbkVycm9yOiBib29sZWFuO1xuICAgIHByaXZhdGUgdW5zdWJzY3JpYmVBbGw7XG4gICAgY29uc3RydWN0b3IocGxhdGZvcm1JZDogT2JqZWN0LCBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIsIGF1dGhQcm9jZXNzOiBBdXRoUHJvY2Vzc1NlcnZpY2UpO1xuICAgIGdldCBjb2xvcigpOiBzdHJpbmcgfCBUaGVtZVBhbGV0dGU7XG4gICAgZ2V0IGNvbG9yQWNjZW50KCk6IHN0cmluZyB8IFRoZW1lUGFsZXR0ZTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIGRlc3Ryb3lcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGNyZWF0ZUFjY291bnQoKTogUHJvbWlzZTx2b2lkPjtcbn1cbiJdfQ==