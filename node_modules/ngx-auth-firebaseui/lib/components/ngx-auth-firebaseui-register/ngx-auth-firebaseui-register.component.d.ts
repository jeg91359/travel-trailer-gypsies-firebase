import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';
import { Subscription } from 'rxjs';
import { AuthProcessService } from '../../services/auth-process.service';
import { MatFormFieldAppearance } from '@angular/material/form-field';
import { ThemePalette } from '@angular/material/core';
import * as ɵngcc0 from '@angular/core';
export declare const confirmPasswordValidator: ValidatorFn;
export declare class NgxAuthFirebaseuiRegisterComponent implements OnInit, OnDestroy {
    private platformId;
    private formBuilder;
    authProcess: AuthProcessService;
    logoUrl: string;
    appearance: MatFormFieldAppearance;
    tosUrl: string;
    privacyPolicyUrl: string;
    titleText: string;
    readAncAcceptText: string;
    termsAndConditionsText: string;
    createAccountButtonText: string;
    alreadyHaveAccountText: string;
    loginButtonText: string;
    nameText: string;
    nameErrorRequiredText: string;
    emailText: string;
    emailErrorRequiredText: string;
    emailErrorPatternText: string;
    passwordText: string;
    passwordErrorRequiredText: string;
    passwordConfirmationText: string;
    passwordConfirmationErrorRequiredText: string;
    passwordErrorMatchText: string;
    onSuccess: any;
    onError: any;
    onLoginRequested: EventEmitter<void>;
    registerForm: FormGroup;
    onErrorSubscription: Subscription;
    authenticationError: boolean;
    private unsubscribeAll;
    constructor(platformId: Object, formBuilder: FormBuilder, authProcess: AuthProcessService);
    get color(): string | ThemePalette;
    get colorAccent(): string | ThemePalette;
    ngOnInit(): void;
    /**
     * On destroy
     */
    ngOnDestroy(): void;
    createAccount(): Promise<void>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxAuthFirebaseuiRegisterComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxAuthFirebaseuiRegisterComponent, "ngx-auth-firebaseui-register", never, {
    "titleText": "titleText";
    "readAncAcceptText": "readAncAcceptText";
    "termsAndConditionsText": "termsAndConditionsText";
    "createAccountButtonText": "createAccountButtonText";
    "alreadyHaveAccountText": "alreadyHaveAccountText";
    "loginButtonText": "loginButtonText";
    "nameText": "nameText";
    "nameErrorRequiredText": "nameErrorRequiredText";
    "emailText": "emailText";
    "emailErrorRequiredText": "emailErrorRequiredText";
    "emailErrorPatternText": "emailErrorPatternText";
    "passwordText": "passwordText";
    "passwordErrorRequiredText": "passwordErrorRequiredText";
    "passwordConfirmationText": "passwordConfirmationText";
    "passwordConfirmationErrorRequiredText": "passwordConfirmationErrorRequiredText";
    "passwordErrorMatchText": "passwordErrorMatchText";
    "logoUrl": "logoUrl";
    "appearance": "appearance";
    "tosUrl": "tosUrl";
    "privacyPolicyUrl": "privacyPolicyUrl";
}, {
    "onLoginRequested": "onLoginRequested";
    "onSuccess": "onSuccess";
    "onError": "onError";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWF1dGgtZmlyZWJhc2V1aS1yZWdpc3Rlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LWF1dGgtZmlyZWJhc2V1aS1yZWdpc3Rlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAsIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdXRoUHJvY2Vzc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hdXRoLXByb2Nlc3Muc2VydmljZSc7XG5pbXBvcnQgeyBNYXRGb3JtRmllbGRBcHBlYXJhbmNlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBUaGVtZVBhbGV0dGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGNvbmZpcm1QYXNzd29yZFZhbGlkYXRvcjogVmFsaWRhdG9yRm47XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hBdXRoRmlyZWJhc2V1aVJlZ2lzdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBwcml2YXRlIGZvcm1CdWlsZGVyO1xuICAgIGF1dGhQcm9jZXNzOiBBdXRoUHJvY2Vzc1NlcnZpY2U7XG4gICAgbG9nb1VybDogc3RyaW5nO1xuICAgIGFwcGVhcmFuY2U6IE1hdEZvcm1GaWVsZEFwcGVhcmFuY2U7XG4gICAgdG9zVXJsOiBzdHJpbmc7XG4gICAgcHJpdmFjeVBvbGljeVVybDogc3RyaW5nO1xuICAgIHRpdGxlVGV4dDogc3RyaW5nO1xuICAgIHJlYWRBbmNBY2NlcHRUZXh0OiBzdHJpbmc7XG4gICAgdGVybXNBbmRDb25kaXRpb25zVGV4dDogc3RyaW5nO1xuICAgIGNyZWF0ZUFjY291bnRCdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgYWxyZWFkeUhhdmVBY2NvdW50VGV4dDogc3RyaW5nO1xuICAgIGxvZ2luQnV0dG9uVGV4dDogc3RyaW5nO1xuICAgIG5hbWVUZXh0OiBzdHJpbmc7XG4gICAgbmFtZUVycm9yUmVxdWlyZWRUZXh0OiBzdHJpbmc7XG4gICAgZW1haWxUZXh0OiBzdHJpbmc7XG4gICAgZW1haWxFcnJvclJlcXVpcmVkVGV4dDogc3RyaW5nO1xuICAgIGVtYWlsRXJyb3JQYXR0ZXJuVGV4dDogc3RyaW5nO1xuICAgIHBhc3N3b3JkVGV4dDogc3RyaW5nO1xuICAgIHBhc3N3b3JkRXJyb3JSZXF1aXJlZFRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZENvbmZpcm1hdGlvblRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZENvbmZpcm1hdGlvbkVycm9yUmVxdWlyZWRUZXh0OiBzdHJpbmc7XG4gICAgcGFzc3dvcmRFcnJvck1hdGNoVGV4dDogc3RyaW5nO1xuICAgIG9uU3VjY2VzczogYW55O1xuICAgIG9uRXJyb3I6IGFueTtcbiAgICBvbkxvZ2luUmVxdWVzdGVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgcmVnaXN0ZXJGb3JtOiBGb3JtR3JvdXA7XG4gICAgb25FcnJvclN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIGF1dGhlbnRpY2F0aW9uRXJyb3I6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZUFsbDtcbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybUlkOiBPYmplY3QsIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlciwgYXV0aFByb2Nlc3M6IEF1dGhQcm9jZXNzU2VydmljZSk7XG4gICAgZ2V0IGNvbG9yKCk6IHN0cmluZyB8IFRoZW1lUGFsZXR0ZTtcbiAgICBnZXQgY29sb3JBY2NlbnQoKTogc3RyaW5nIHwgVGhlbWVQYWxldHRlO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT24gZGVzdHJveVxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgY3JlYXRlQWNjb3VudCgpOiBQcm9taXNlPHZvaWQ+O1xufVxuIl19