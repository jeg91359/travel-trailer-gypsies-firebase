import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { AbstractControl, FormGroup } from '@angular/forms';
import { MatTabChangeEvent, MatTabGroup } from '@angular/material/tabs';
import { ThemePalette } from '@angular/material/core';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { MatFormFieldAppearance } from '@angular/material/form-field';
import { AngularFireAuth } from '@angular/fire/auth';
import { MatPasswordStrengthComponent } from '@angular-material-extensions/password-strength';
import { Subscription } from 'rxjs';
import { LegalityDialogComponent, Theme } from '..';
import { NgxAuthFirebaseUIConfig } from '../../interfaces';
import { AuthProcessService, AuthProvider } from '../../services/auth-process.service';
import * as ɵngcc0 from '@angular/core';
export declare const EMAIL_REGEX: RegExp;
export declare const PHONE_NUMBER_REGEX: RegExp;
export declare class AuthComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private platformId;
    config: NgxAuthFirebaseUIConfig;
    auth: AngularFireAuth;
    authProcess: AuthProcessService;
    dialog: MatDialog;
    private activatedRoute;
    private changeDetectorRef;
    matTabGroup: MatTabGroup;
    passwordStrength: MatPasswordStrengthComponent;
    isLoading: boolean;
    providers: AuthProvider[] | AuthProvider;
    providersTheme: Theme;
    appearance: MatFormFieldAppearance;
    tabIndex: number | null;
    registrationEnabled: boolean;
    resetPasswordEnabled: boolean;
    guestEnabled: boolean;
    tosUrl: string;
    privacyPolicyUrl: string;
    goBackURL: string;
    messageOnAuthSuccess: string;
    messageOnAuthError: string;
    messageOnEmailConfirmationSuccess: string;
    onSuccess: any;
    onError: any;
    selectedTabChange: EventEmitter<MatTabChangeEvent>;
    enableLengthRule: boolean;
    enableLowerCaseLetterRule: boolean;
    enableUpperCaseLetterRule: boolean;
    enableDigitRule: boolean;
    enableSpecialCharRule: boolean;
    min: number;
    max: number;
    customValidator: RegExp;
    onStrengthChanged: EventEmitter<number>;
    verifyEmailTemplate: TemplateRef<any>;
    verifyEmailTitleText: string;
    verifyEmailConfirmationText: string;
    verifyEmailGoBackText: string;
    sendNewVerificationEmailText: string;
    signOutText: string;
    resetPasswordTabText: string;
    resetPasswordInputText: string;
    resetPasswordErrorRequiredText: string;
    resetPasswordErrorPatternText: string;
    resetPasswordActionButtonText: string;
    resetPasswordInstructionsText: string;
    signInTabText: string;
    signInCardTitleText: string;
    loginButtonText: string;
    forgotPasswordButtonText: string;
    nameText: string;
    nameErrorRequiredText: string;
    nameErrorMinLengthText: string;
    nameErrorMaxLengthText: string;
    emailText: string;
    emailErrorRequiredText: string;
    emailErrorPatternText: string;
    passwordText: string;
    passwordErrorRequiredText: string;
    passwordErrorMinLengthText: string;
    passwordErrorMaxLengthText: string;
    registerTabText: string;
    registerCardTitleText: string;
    registerButtonText: string;
    guestButtonText: string;
    emailConfirmationTitle: string;
    emailConfirmationText: string;
    authProvider: typeof AuthProvider;
    passwordResetWished: boolean;
    signInFormGroup: FormGroup;
    signUpFormGroup: FormGroup;
    resetPasswordFormGroup: FormGroup;
    onErrorSubscription: Subscription;
    authenticationError: boolean;
    passReset: boolean;
    dialogRef: MatDialogRef<LegalityDialogComponent>;
    authProviders: typeof AuthProvider;
    signInEmailFormControl: AbstractControl;
    sigInPasswordFormControl: AbstractControl;
    sigUpNameFormControl: AbstractControl;
    sigUpEmailFormControl: AbstractControl;
    sigUpPasswordFormControl: AbstractControl;
    sigUpPasswordConfirmationFormControl: AbstractControl;
    resetPasswordEmailFormControl: AbstractControl;
    constructor(platformId: Object, config: NgxAuthFirebaseUIConfig, auth: AngularFireAuth, authProcess: AuthProcessService, dialog: MatDialog, activatedRoute: ActivatedRoute, changeDetectorRef: ChangeDetectorRef);
    get color(): string | ThemePalette;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onTabChange(event: MatTabChangeEvent): void;
    signOut(): Promise<void>;
    signIn(): Promise<void>;
    updateAuthSnackbarMessages(): void;
    createForgotPasswordTab(): void;
    processLegalSignUP(authProvider?: AuthProvider): void;
    signUp(): Promise<void>;
    signUpAnonymously(): Promise<void>;
    resetPassword(): void;
    private chooseBackUrl;
    private _initSignInFormGroupBuilder;
    private _initSignUpFormGroupBuilder;
    private _initResetPasswordFormGroupBuilder;
    private _afterSignUpMiddleware;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AuthComponent, "ngx-auth-firebaseui", never, {
    "providers": "providers";
    "registrationEnabled": "registrationEnabled";
    "resetPasswordEnabled": "resetPasswordEnabled";
    "guestEnabled": "guestEnabled";
    "enableLengthRule": "enableLengthRule";
    "enableLowerCaseLetterRule": "enableLowerCaseLetterRule";
    "enableUpperCaseLetterRule": "enableUpperCaseLetterRule";
    "enableDigitRule": "enableDigitRule";
    "enableSpecialCharRule": "enableSpecialCharRule";
    "verifyEmailGoBackText": "verifyEmailGoBackText";
    "signOutText": "signOutText";
    "resetPasswordTabText": "resetPasswordTabText";
    "resetPasswordInputText": "resetPasswordInputText";
    "resetPasswordErrorRequiredText": "resetPasswordErrorRequiredText";
    "resetPasswordErrorPatternText": "resetPasswordErrorPatternText";
    "resetPasswordActionButtonText": "resetPasswordActionButtonText";
    "resetPasswordInstructionsText": "resetPasswordInstructionsText";
    "signInTabText": "signInTabText";
    "signInCardTitleText": "signInCardTitleText";
    "loginButtonText": "loginButtonText";
    "forgotPasswordButtonText": "forgotPasswordButtonText";
    "nameText": "nameText";
    "nameErrorRequiredText": "nameErrorRequiredText";
    "nameErrorMinLengthText": "nameErrorMinLengthText";
    "nameErrorMaxLengthText": "nameErrorMaxLengthText";
    "emailText": "emailText";
    "emailErrorRequiredText": "emailErrorRequiredText";
    "emailErrorPatternText": "emailErrorPatternText";
    "passwordText": "passwordText";
    "passwordErrorRequiredText": "passwordErrorRequiredText";
    "passwordErrorMinLengthText": "passwordErrorMinLengthText";
    "passwordErrorMaxLengthText": "passwordErrorMaxLengthText";
    "registerTabText": "registerTabText";
    "registerCardTitleText": "registerCardTitleText";
    "registerButtonText": "registerButtonText";
    "guestButtonText": "guestButtonText";
    "emailConfirmationTitle": "emailConfirmationTitle";
    "emailConfirmationText": "emailConfirmationText";
    "min": "min";
    "max": "max";
    "goBackURL": "goBackURL";
    "tabIndex": "tabIndex";
    "providersTheme": "providersTheme";
    "appearance": "appearance";
    "tosUrl": "tosUrl";
    "privacyPolicyUrl": "privacyPolicyUrl";
    "messageOnAuthSuccess": "messageOnAuthSuccess";
    "messageOnAuthError": "messageOnAuthError";
    "messageOnEmailConfirmationSuccess": "messageOnEmailConfirmationSuccess";
    "customValidator": "customValidator";
    "verifyEmailTemplate": "verifyEmailTemplate";
    "verifyEmailTitleText": "verifyEmailTitleText";
    "verifyEmailConfirmationText": "verifyEmailConfirmationText";
    "sendNewVerificationEmailText": "sendNewVerificationEmailText";
}, {
    "selectedTabChange": "selectedTabChange";
    "onStrengthChanged": "onStrengthChanged";
    "onSuccess": "onSuccess";
    "onError": "onError";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYXV0aC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFhQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0R0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBNYXRUYWJDaGFuZ2VFdmVudCwgTWF0VGFiR3JvdXAgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC90YWJzJztcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHsgTWF0Rm9ybUZpZWxkQXBwZWFyYW5jZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVBdXRoIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9hdXRoJztcbmltcG9ydCB7IE1hdFBhc3N3b3JkU3RyZW5ndGhDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci1tYXRlcmlhbC1leHRlbnNpb25zL3Bhc3N3b3JkLXN0cmVuZ3RoJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTGVnYWxpdHlEaWFsb2dDb21wb25lbnQsIFRoZW1lIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgTmd4QXV0aEZpcmViYXNlVUlDb25maWcgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEF1dGhQcm9jZXNzU2VydmljZSwgQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXV0aC1wcm9jZXNzLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRU1BSUxfUkVHRVg6IFJlZ0V4cDtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFBIT05FX05VTUJFUl9SRUdFWDogUmVnRXhwO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXV0aENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBjb25maWc6IE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnO1xuICAgIGF1dGg6IEFuZ3VsYXJGaXJlQXV0aDtcbiAgICBhdXRoUHJvY2VzczogQXV0aFByb2Nlc3NTZXJ2aWNlO1xuICAgIGRpYWxvZzogTWF0RGlhbG9nO1xuICAgIHByaXZhdGUgYWN0aXZhdGVkUm91dGU7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBtYXRUYWJHcm91cDogTWF0VGFiR3JvdXA7XG4gICAgcGFzc3dvcmRTdHJlbmd0aDogTWF0UGFzc3dvcmRTdHJlbmd0aENvbXBvbmVudDtcbiAgICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gICAgcHJvdmlkZXJzOiBBdXRoUHJvdmlkZXJbXSB8IEF1dGhQcm92aWRlcjtcbiAgICBwcm92aWRlcnNUaGVtZTogVGhlbWU7XG4gICAgYXBwZWFyYW5jZTogTWF0Rm9ybUZpZWxkQXBwZWFyYW5jZTtcbiAgICB0YWJJbmRleDogbnVtYmVyIHwgbnVsbDtcbiAgICByZWdpc3RyYXRpb25FbmFibGVkOiBib29sZWFuO1xuICAgIHJlc2V0UGFzc3dvcmRFbmFibGVkOiBib29sZWFuO1xuICAgIGd1ZXN0RW5hYmxlZDogYm9vbGVhbjtcbiAgICB0b3NVcmw6IHN0cmluZztcbiAgICBwcml2YWN5UG9saWN5VXJsOiBzdHJpbmc7XG4gICAgZ29CYWNrVVJMOiBzdHJpbmc7XG4gICAgbWVzc2FnZU9uQXV0aFN1Y2Nlc3M6IHN0cmluZztcbiAgICBtZXNzYWdlT25BdXRoRXJyb3I6IHN0cmluZztcbiAgICBtZXNzYWdlT25FbWFpbENvbmZpcm1hdGlvblN1Y2Nlc3M6IHN0cmluZztcbiAgICBvblN1Y2Nlc3M6IGFueTtcbiAgICBvbkVycm9yOiBhbnk7XG4gICAgc2VsZWN0ZWRUYWJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxNYXRUYWJDaGFuZ2VFdmVudD47XG4gICAgZW5hYmxlTGVuZ3RoUnVsZTogYm9vbGVhbjtcbiAgICBlbmFibGVMb3dlckNhc2VMZXR0ZXJSdWxlOiBib29sZWFuO1xuICAgIGVuYWJsZVVwcGVyQ2FzZUxldHRlclJ1bGU6IGJvb2xlYW47XG4gICAgZW5hYmxlRGlnaXRSdWxlOiBib29sZWFuO1xuICAgIGVuYWJsZVNwZWNpYWxDaGFyUnVsZTogYm9vbGVhbjtcbiAgICBtaW46IG51bWJlcjtcbiAgICBtYXg6IG51bWJlcjtcbiAgICBjdXN0b21WYWxpZGF0b3I6IFJlZ0V4cDtcbiAgICBvblN0cmVuZ3RoQ2hhbmdlZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgdmVyaWZ5RW1haWxUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB2ZXJpZnlFbWFpbFRpdGxlVGV4dDogc3RyaW5nO1xuICAgIHZlcmlmeUVtYWlsQ29uZmlybWF0aW9uVGV4dDogc3RyaW5nO1xuICAgIHZlcmlmeUVtYWlsR29CYWNrVGV4dDogc3RyaW5nO1xuICAgIHNlbmROZXdWZXJpZmljYXRpb25FbWFpbFRleHQ6IHN0cmluZztcbiAgICBzaWduT3V0VGV4dDogc3RyaW5nO1xuICAgIHJlc2V0UGFzc3dvcmRUYWJUZXh0OiBzdHJpbmc7XG4gICAgcmVzZXRQYXNzd29yZElucHV0VGV4dDogc3RyaW5nO1xuICAgIHJlc2V0UGFzc3dvcmRFcnJvclJlcXVpcmVkVGV4dDogc3RyaW5nO1xuICAgIHJlc2V0UGFzc3dvcmRFcnJvclBhdHRlcm5UZXh0OiBzdHJpbmc7XG4gICAgcmVzZXRQYXNzd29yZEFjdGlvbkJ1dHRvblRleHQ6IHN0cmluZztcbiAgICByZXNldFBhc3N3b3JkSW5zdHJ1Y3Rpb25zVGV4dDogc3RyaW5nO1xuICAgIHNpZ25JblRhYlRleHQ6IHN0cmluZztcbiAgICBzaWduSW5DYXJkVGl0bGVUZXh0OiBzdHJpbmc7XG4gICAgbG9naW5CdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgZm9yZ290UGFzc3dvcmRCdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgbmFtZVRleHQ6IHN0cmluZztcbiAgICBuYW1lRXJyb3JSZXF1aXJlZFRleHQ6IHN0cmluZztcbiAgICBuYW1lRXJyb3JNaW5MZW5ndGhUZXh0OiBzdHJpbmc7XG4gICAgbmFtZUVycm9yTWF4TGVuZ3RoVGV4dDogc3RyaW5nO1xuICAgIGVtYWlsVGV4dDogc3RyaW5nO1xuICAgIGVtYWlsRXJyb3JSZXF1aXJlZFRleHQ6IHN0cmluZztcbiAgICBlbWFpbEVycm9yUGF0dGVyblRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZFRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZEVycm9yUmVxdWlyZWRUZXh0OiBzdHJpbmc7XG4gICAgcGFzc3dvcmRFcnJvck1pbkxlbmd0aFRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZEVycm9yTWF4TGVuZ3RoVGV4dDogc3RyaW5nO1xuICAgIHJlZ2lzdGVyVGFiVGV4dDogc3RyaW5nO1xuICAgIHJlZ2lzdGVyQ2FyZFRpdGxlVGV4dDogc3RyaW5nO1xuICAgIHJlZ2lzdGVyQnV0dG9uVGV4dDogc3RyaW5nO1xuICAgIGd1ZXN0QnV0dG9uVGV4dDogc3RyaW5nO1xuICAgIGVtYWlsQ29uZmlybWF0aW9uVGl0bGU6IHN0cmluZztcbiAgICBlbWFpbENvbmZpcm1hdGlvblRleHQ6IHN0cmluZztcbiAgICBhdXRoUHJvdmlkZXI6IHR5cGVvZiBBdXRoUHJvdmlkZXI7XG4gICAgcGFzc3dvcmRSZXNldFdpc2hlZDogYm9vbGVhbjtcbiAgICBzaWduSW5Gb3JtR3JvdXA6IEZvcm1Hcm91cDtcbiAgICBzaWduVXBGb3JtR3JvdXA6IEZvcm1Hcm91cDtcbiAgICByZXNldFBhc3N3b3JkRm9ybUdyb3VwOiBGb3JtR3JvdXA7XG4gICAgb25FcnJvclN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIGF1dGhlbnRpY2F0aW9uRXJyb3I6IGJvb2xlYW47XG4gICAgcGFzc1Jlc2V0OiBib29sZWFuO1xuICAgIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPExlZ2FsaXR5RGlhbG9nQ29tcG9uZW50PjtcbiAgICBhdXRoUHJvdmlkZXJzOiB0eXBlb2YgQXV0aFByb3ZpZGVyO1xuICAgIHNpZ25JbkVtYWlsRm9ybUNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDtcbiAgICBzaWdJblBhc3N3b3JkRm9ybUNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDtcbiAgICBzaWdVcE5hbWVGb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICAgIHNpZ1VwRW1haWxGb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICAgIHNpZ1VwUGFzc3dvcmRGb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICAgIHNpZ1VwUGFzc3dvcmRDb25maXJtYXRpb25Gb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sO1xuICAgIHJlc2V0UGFzc3dvcmRFbWFpbEZvcm1Db250cm9sOiBBYnN0cmFjdENvbnRyb2w7XG4gICAgY29uc3RydWN0b3IocGxhdGZvcm1JZDogT2JqZWN0LCBjb25maWc6IE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnLCBhdXRoOiBBbmd1bGFyRmlyZUF1dGgsIGF1dGhQcm9jZXNzOiBBdXRoUHJvY2Vzc1NlcnZpY2UsIGRpYWxvZzogTWF0RGlhbG9nLCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgZ2V0IGNvbG9yKCk6IHN0cmluZyB8IFRoZW1lUGFsZXR0ZTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25UYWJDaGFuZ2UoZXZlbnQ6IE1hdFRhYkNoYW5nZUV2ZW50KTogdm9pZDtcbiAgICBzaWduT3V0KCk6IFByb21pc2U8dm9pZD47XG4gICAgc2lnbkluKCk6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlQXV0aFNuYWNrYmFyTWVzc2FnZXMoKTogdm9pZDtcbiAgICBjcmVhdGVGb3Jnb3RQYXNzd29yZFRhYigpOiB2b2lkO1xuICAgIHByb2Nlc3NMZWdhbFNpZ25VUChhdXRoUHJvdmlkZXI/OiBBdXRoUHJvdmlkZXIpOiB2b2lkO1xuICAgIHNpZ25VcCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNpZ25VcEFub255bW91c2x5KCk6IFByb21pc2U8dm9pZD47XG4gICAgcmVzZXRQYXNzd29yZCgpOiB2b2lkO1xuICAgIHByaXZhdGUgY2hvb3NlQmFja1VybDtcbiAgICBwcml2YXRlIF9pbml0U2lnbkluRm9ybUdyb3VwQnVpbGRlcjtcbiAgICBwcml2YXRlIF9pbml0U2lnblVwRm9ybUdyb3VwQnVpbGRlcjtcbiAgICBwcml2YXRlIF9pbml0UmVzZXRQYXNzd29yZEZvcm1Hcm91cEJ1aWxkZXI7XG4gICAgcHJpdmF0ZSBfYWZ0ZXJTaWduVXBNaWRkbGV3YXJlO1xufVxuIl19