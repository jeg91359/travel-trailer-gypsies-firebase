import { EventEmitter } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import '@firebase/auth';
import { User, UserInfo } from 'firebase/app';
import { Observable } from 'rxjs';
import { FirestoreSyncService } from './firestore-sync.service';
import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';
import { ICredentials, ISignInProcess, ISignUpProcess, NgxAuthFirebaseUIConfig } from '../interfaces';
import UserCredential = firebase.auth.UserCredential;
import * as ɵngcc0 from '@angular/core';
export declare const facebookAuthProvider: import("@firebase/auth-types").FacebookAuthProvider;
export declare const googleAuthProvider: import("@firebase/auth-types").GoogleAuthProvider;
export declare const appleAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare const twitterAuthProvider: import("@firebase/auth-types").TwitterAuthProvider;
export declare const githubAuthProvider: import("@firebase/auth-types").GithubAuthProvider;
export declare const microsoftAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare const yahooAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare enum AuthProvider {
    ALL = "all",
    ANONYMOUS = "anonymous",
    EmailAndPassword = "firebase",
    Google = "google",
    Apple = "Apple",
    Facebook = "facebook",
    Twitter = "twitter",
    Github = "github",
    Microsoft = "microsoft",
    Yahoo = "yahoo",
    PhoneNumber = "phoneNumber"
}
export declare class AuthProcessService implements ISignInProcess, ISignUpProcess {
    afa: AngularFireAuth;
    config: NgxAuthFirebaseUIConfig;
    private snackBar;
    private fireStoreService;
    private matSnackBarConfig;
    onSuccessEmitter: EventEmitter<any>;
    onErrorEmitter: EventEmitter<any>;
    private _user$;
    get user$(): Observable<firebase.User | null>;
    /**
     * @deprecated access via user$ asynchronously instead
     */
    user: User;
    messageOnAuthSuccess: string;
    messageOnAuthError: string;
    emailConfirmationSent: boolean;
    emailToConfirm: string;
    constructor(afa: AngularFireAuth, config: NgxAuthFirebaseUIConfig, snackBar: MatSnackBar, fireStoreService: FirestoreSyncService, matSnackBarConfig: MatSnackBarConfig);
    listenToUserEvents(): void;
    /**
     * Reset the password of the ngx-auth-firebaseui-user via email
     *
     * @param email - the email to reset
     */
    resetPassword(email: string): Promise<void>;
    /**
     * General sign in mechanism to authenticate the users with a firebase project
     * using a traditional way, via username and password or by using an authentication provider
     * like google, facebook, twitter and github
     *
     * @param provider - the provider to authenticate with (google, facebook, twitter, github)
     * @param credentials optional email and password
     */
    signInWith(provider: AuthProvider, credentials?: ICredentials): Promise<void>;
    /**
     * Sign up new users via email and password.
     * After that the ngx-auth-firebaseui-user should verify and confirm an email sent via the firebase
     *
     * @param displayName - the displayName if the new ngx-auth-firebaseui-user
     * @param credentials email and password
     * @returns -
     */
    signUp(displayName: string, credentials: ICredentials): Promise<void>;
    sendNewVerificationEmail(): Promise<void | never>;
    signOut(): Promise<void>;
    /**
     * Update the profile (name + photo url) of the authenticated ngx-auth-firebaseui-user in the
     * firebase authentication feature (not in firestore)
     *
     * @param name - the new name of the authenticated ngx-auth-firebaseui-user
     * @param photoURL - the new photo url of the authenticated ngx-auth-firebaseui-user
     * @returns -
     */
    updateProfile(name: string, photoURL: string): Promise<void>;
    parseUserInfo(user: User): UserInfo;
    getUserPhotoUrl(): Observable<string | null>;
    getPhotoPath(image: string): string;
    signInWithPhoneNumber(): void;
    handleSuccess(userCredential: UserCredential): Promise<void>;
    handleError(error: any): void;
    reloadUserInfo(): import("rxjs").Subscription;
    getMessageOnAuthError(error: any): any;
    showToast(message: string): void;
    showErrorToast(error: any): void;
    notifyError(error: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthProcessService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1wcm9jZXNzLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXV0aC1wcm9jZXNzLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzRkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlQXV0aCB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvYXV0aCc7XG5pbXBvcnQgJ0BmaXJlYmFzZS9hdXRoJztcbmltcG9ydCB7IFVzZXIsIFVzZXJJbmZvIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpcmVzdG9yZVN5bmNTZXJ2aWNlIH0gZnJvbSAnLi9maXJlc3RvcmUtc3luYy5zZXJ2aWNlJztcbmltcG9ydCB7IE1hdFNuYWNrQmFyLCBNYXRTbmFja0JhckNvbmZpZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NuYWNrLWJhcic7XG5pbXBvcnQgeyBJQ3JlZGVudGlhbHMsIElTaWduSW5Qcm9jZXNzLCBJU2lnblVwUHJvY2VzcywgTmd4QXV0aEZpcmViYXNlVUlDb25maWcgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCBVc2VyQ3JlZGVudGlhbCA9IGZpcmViYXNlLmF1dGguVXNlckNyZWRlbnRpYWw7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBmYWNlYm9va0F1dGhQcm92aWRlcjogaW1wb3J0KFwiQGZpcmViYXNlL2F1dGgtdHlwZXNcIikuRmFjZWJvb2tBdXRoUHJvdmlkZXI7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBnb29nbGVBdXRoUHJvdmlkZXI6IGltcG9ydChcIkBmaXJlYmFzZS9hdXRoLXR5cGVzXCIpLkdvb2dsZUF1dGhQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGFwcGxlQXV0aFByb3ZpZGVyOiBpbXBvcnQoXCJAZmlyZWJhc2UvYXV0aC10eXBlc1wiKS5PQXV0aFByb3ZpZGVyO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgdHdpdHRlckF1dGhQcm92aWRlcjogaW1wb3J0KFwiQGZpcmViYXNlL2F1dGgtdHlwZXNcIikuVHdpdHRlckF1dGhQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGdpdGh1YkF1dGhQcm92aWRlcjogaW1wb3J0KFwiQGZpcmViYXNlL2F1dGgtdHlwZXNcIikuR2l0aHViQXV0aFByb3ZpZGVyO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgbWljcm9zb2Z0QXV0aFByb3ZpZGVyOiBpbXBvcnQoXCJAZmlyZWJhc2UvYXV0aC10eXBlc1wiKS5PQXV0aFByb3ZpZGVyO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgeWFob29BdXRoUHJvdmlkZXI6IGltcG9ydChcIkBmaXJlYmFzZS9hdXRoLXR5cGVzXCIpLk9BdXRoUHJvdmlkZXI7XG5leHBvcnQgZGVjbGFyZSBlbnVtIEF1dGhQcm92aWRlciB7XG4gICAgQUxMID0gXCJhbGxcIixcbiAgICBBTk9OWU1PVVMgPSBcImFub255bW91c1wiLFxuICAgIEVtYWlsQW5kUGFzc3dvcmQgPSBcImZpcmViYXNlXCIsXG4gICAgR29vZ2xlID0gXCJnb29nbGVcIixcbiAgICBBcHBsZSA9IFwiQXBwbGVcIixcbiAgICBGYWNlYm9vayA9IFwiZmFjZWJvb2tcIixcbiAgICBUd2l0dGVyID0gXCJ0d2l0dGVyXCIsXG4gICAgR2l0aHViID0gXCJnaXRodWJcIixcbiAgICBNaWNyb3NvZnQgPSBcIm1pY3Jvc29mdFwiLFxuICAgIFlhaG9vID0gXCJ5YWhvb1wiLFxuICAgIFBob25lTnVtYmVyID0gXCJwaG9uZU51bWJlclwiXG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdXRoUHJvY2Vzc1NlcnZpY2UgaW1wbGVtZW50cyBJU2lnbkluUHJvY2VzcywgSVNpZ25VcFByb2Nlc3Mge1xuICAgIGFmYTogQW5ndWxhckZpcmVBdXRoO1xuICAgIGNvbmZpZzogTmd4QXV0aEZpcmViYXNlVUlDb25maWc7XG4gICAgcHJpdmF0ZSBzbmFja0JhcjtcbiAgICBwcml2YXRlIGZpcmVTdG9yZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBtYXRTbmFja0JhckNvbmZpZztcbiAgICBvblN1Y2Nlc3NFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkVycm9yRW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHJpdmF0ZSBfdXNlciQ7XG4gICAgZ2V0IHVzZXIkKCk6IE9ic2VydmFibGU8ZmlyZWJhc2UuVXNlciB8IG51bGw+O1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGFjY2VzcyB2aWEgdXNlciQgYXN5bmNocm9ub3VzbHkgaW5zdGVhZFxuICAgICAqL1xuICAgIHVzZXI6IFVzZXI7XG4gICAgbWVzc2FnZU9uQXV0aFN1Y2Nlc3M6IHN0cmluZztcbiAgICBtZXNzYWdlT25BdXRoRXJyb3I6IHN0cmluZztcbiAgICBlbWFpbENvbmZpcm1hdGlvblNlbnQ6IGJvb2xlYW47XG4gICAgZW1haWxUb0NvbmZpcm06IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihhZmE6IEFuZ3VsYXJGaXJlQXV0aCwgY29uZmlnOiBOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZywgc25hY2tCYXI6IE1hdFNuYWNrQmFyLCBmaXJlU3RvcmVTZXJ2aWNlOiBGaXJlc3RvcmVTeW5jU2VydmljZSwgbWF0U25hY2tCYXJDb25maWc6IE1hdFNuYWNrQmFyQ29uZmlnKTtcbiAgICBsaXN0ZW5Ub1VzZXJFdmVudHMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgcGFzc3dvcmQgb2YgdGhlIG5neC1hdXRoLWZpcmViYXNldWktdXNlciB2aWEgZW1haWxcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbWFpbCAtIHRoZSBlbWFpbCB0byByZXNldFxuICAgICAqL1xuICAgIHJlc2V0UGFzc3dvcmQoZW1haWw6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gICAgLyoqXG4gICAgICogR2VuZXJhbCBzaWduIGluIG1lY2hhbmlzbSB0byBhdXRoZW50aWNhdGUgdGhlIHVzZXJzIHdpdGggYSBmaXJlYmFzZSBwcm9qZWN0XG4gICAgICogdXNpbmcgYSB0cmFkaXRpb25hbCB3YXksIHZpYSB1c2VybmFtZSBhbmQgcGFzc3dvcmQgb3IgYnkgdXNpbmcgYW4gYXV0aGVudGljYXRpb24gcHJvdmlkZXJcbiAgICAgKiBsaWtlIGdvb2dsZSwgZmFjZWJvb2ssIHR3aXR0ZXIgYW5kIGdpdGh1YlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb3ZpZGVyIC0gdGhlIHByb3ZpZGVyIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIChnb29nbGUsIGZhY2Vib29rLCB0d2l0dGVyLCBnaXRodWIpXG4gICAgICogQHBhcmFtIGNyZWRlbnRpYWxzIG9wdGlvbmFsIGVtYWlsIGFuZCBwYXNzd29yZFxuICAgICAqL1xuICAgIHNpZ25JbldpdGgocHJvdmlkZXI6IEF1dGhQcm92aWRlciwgY3JlZGVudGlhbHM/OiBJQ3JlZGVudGlhbHMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIFNpZ24gdXAgbmV3IHVzZXJzIHZpYSBlbWFpbCBhbmQgcGFzc3dvcmQuXG4gICAgICogQWZ0ZXIgdGhhdCB0aGUgbmd4LWF1dGgtZmlyZWJhc2V1aS11c2VyIHNob3VsZCB2ZXJpZnkgYW5kIGNvbmZpcm0gYW4gZW1haWwgc2VudCB2aWEgdGhlIGZpcmViYXNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGlzcGxheU5hbWUgLSB0aGUgZGlzcGxheU5hbWUgaWYgdGhlIG5ldyBuZ3gtYXV0aC1maXJlYmFzZXVpLXVzZXJcbiAgICAgKiBAcGFyYW0gY3JlZGVudGlhbHMgZW1haWwgYW5kIHBhc3N3b3JkXG4gICAgICogQHJldHVybnMgLVxuICAgICAqL1xuICAgIHNpZ25VcChkaXNwbGF5TmFtZTogc3RyaW5nLCBjcmVkZW50aWFsczogSUNyZWRlbnRpYWxzKTogUHJvbWlzZTx2b2lkPjtcbiAgICBzZW5kTmV3VmVyaWZpY2F0aW9uRW1haWwoKTogUHJvbWlzZTx2b2lkIHwgbmV2ZXI+O1xuICAgIHNpZ25PdXQoKTogUHJvbWlzZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHByb2ZpbGUgKG5hbWUgKyBwaG90byB1cmwpIG9mIHRoZSBhdXRoZW50aWNhdGVkIG5neC1hdXRoLWZpcmViYXNldWktdXNlciBpbiB0aGVcbiAgICAgKiBmaXJlYmFzZSBhdXRoZW50aWNhdGlvbiBmZWF0dXJlIChub3QgaW4gZmlyZXN0b3JlKVxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgLSB0aGUgbmV3IG5hbWUgb2YgdGhlIGF1dGhlbnRpY2F0ZWQgbmd4LWF1dGgtZmlyZWJhc2V1aS11c2VyXG4gICAgICogQHBhcmFtIHBob3RvVVJMIC0gdGhlIG5ldyBwaG90byB1cmwgb2YgdGhlIGF1dGhlbnRpY2F0ZWQgbmd4LWF1dGgtZmlyZWJhc2V1aS11c2VyXG4gICAgICogQHJldHVybnMgLVxuICAgICAqL1xuICAgIHVwZGF0ZVByb2ZpbGUobmFtZTogc3RyaW5nLCBwaG90b1VSTDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICBwYXJzZVVzZXJJbmZvKHVzZXI6IFVzZXIpOiBVc2VySW5mbztcbiAgICBnZXRVc2VyUGhvdG9VcmwoKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsPjtcbiAgICBnZXRQaG90b1BhdGgoaW1hZ2U6IHN0cmluZyk6IHN0cmluZztcbiAgICBzaWduSW5XaXRoUGhvbmVOdW1iZXIoKTogdm9pZDtcbiAgICBoYW5kbGVTdWNjZXNzKHVzZXJDcmVkZW50aWFsOiBVc2VyQ3JlZGVudGlhbCk6IFByb21pc2U8dm9pZD47XG4gICAgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSk6IHZvaWQ7XG4gICAgcmVsb2FkVXNlckluZm8oKTogaW1wb3J0KFwicnhqc1wiKS5TdWJzY3JpcHRpb247XG4gICAgZ2V0TWVzc2FnZU9uQXV0aEVycm9yKGVycm9yOiBhbnkpOiBhbnk7XG4gICAgc2hvd1RvYXN0KG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQ7XG4gICAgc2hvd0Vycm9yVG9hc3QoZXJyb3I6IGFueSk6IHZvaWQ7XG4gICAgbm90aWZ5RXJyb3IoZXJyb3I6IGFueSk6IHZvaWQ7XG59XG4iXX0=