import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { FormControl, ValidatorFn } from '@angular/forms';
import { Criteria } from '../../enum/criteria.enum';
import { MatPasswordStrengthValidator } from '../../validator/mat-password-strength-validator';
import { ThemePalette } from '@angular/material/core';
import * as ɵngcc0 from '@angular/core';
export declare class MatPasswordStrengthComponent implements OnInit, OnChanges {
    password: string;
    externalError: boolean;
    enableLengthRule: boolean;
    enableLowerCaseLetterRule: boolean;
    enableUpperCaseLetterRule: boolean;
    enableDigitRule: boolean;
    enableSpecialCharRule: boolean;
    min: number;
    max: number;
    customValidator: RegExp;
    warnThreshold: number;
    accentThreshold: number;
    onStrengthChanged: EventEmitter<number>;
    criteriaMap: Map<Criteria, RegExp>;
    containAtLeastMinChars: boolean;
    containAtLeastOneLowerCaseLetter: boolean;
    containAtLeastOneUpperCaseLetter: boolean;
    containAtLeastOneDigit: boolean;
    containAtLeastOneSpecialChar: boolean;
    containAtCustomChars: boolean;
    passwordFormControl: FormControl;
    passwordConfirmationFormControl: FormControl;
    validatorsArray: ValidatorFn[];
    private _strength;
    private _color;
    Validators: ValidatorFn;
    matPasswordStrengthValidator: MatPasswordStrengthValidator;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    get strength(): number;
    get color(): ThemePalette;
    private _containAtLeastMinChars;
    private _containAtLeastOneLowerCaseLetter;
    private _containAtLeastOneUpperCaseLetter;
    private _containAtLeastOneDigit;
    private _containAtLeastOneSpecialChar;
    private _containCustomChars;
    parseCustomValidatorsRegex(value?: string | RegExp): RegExp;
    setRulesAndValidators(): void;
    calculatePasswordStrength(): void;
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatPasswordStrengthComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatPasswordStrengthComponent, "mat-password-strength", ["matPasswordStrength"], {
    "enableLengthRule": "enableLengthRule";
    "enableLowerCaseLetterRule": "enableLowerCaseLetterRule";
    "enableUpperCaseLetterRule": "enableUpperCaseLetterRule";
    "enableDigitRule": "enableDigitRule";
    "enableSpecialCharRule": "enableSpecialCharRule";
    "min": "min";
    "max": "max";
    "warnThreshold": "warnThreshold";
    "accentThreshold": "accentThreshold";
    "password": "password";
    "externalError": "externalError";
    "customValidator": "customValidator";
}, {
    "onStrengthChanged": "onStrengthChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXBhc3N3b3JkLXN0cmVuZ3RoLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtYXQtcGFzc3dvcmQtc3RyZW5ndGguY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENyaXRlcmlhIH0gZnJvbSAnLi4vLi4vZW51bS9jcml0ZXJpYS5lbnVtJztcbmltcG9ydCB7IE1hdFBhc3N3b3JkU3RyZW5ndGhWYWxpZGF0b3IgfSBmcm9tICcuLi8uLi92YWxpZGF0b3IvbWF0LXBhc3N3b3JkLXN0cmVuZ3RoLXZhbGlkYXRvcic7XG5pbXBvcnQgeyBUaGVtZVBhbGV0dGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hdFBhc3N3b3JkU3RyZW5ndGhDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICBleHRlcm5hbEVycm9yOiBib29sZWFuO1xuICAgIGVuYWJsZUxlbmd0aFJ1bGU6IGJvb2xlYW47XG4gICAgZW5hYmxlTG93ZXJDYXNlTGV0dGVyUnVsZTogYm9vbGVhbjtcbiAgICBlbmFibGVVcHBlckNhc2VMZXR0ZXJSdWxlOiBib29sZWFuO1xuICAgIGVuYWJsZURpZ2l0UnVsZTogYm9vbGVhbjtcbiAgICBlbmFibGVTcGVjaWFsQ2hhclJ1bGU6IGJvb2xlYW47XG4gICAgbWluOiBudW1iZXI7XG4gICAgbWF4OiBudW1iZXI7XG4gICAgY3VzdG9tVmFsaWRhdG9yOiBSZWdFeHA7XG4gICAgd2FyblRocmVzaG9sZDogbnVtYmVyO1xuICAgIGFjY2VudFRocmVzaG9sZDogbnVtYmVyO1xuICAgIG9uU3RyZW5ndGhDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBjcml0ZXJpYU1hcDogTWFwPENyaXRlcmlhLCBSZWdFeHA+O1xuICAgIGNvbnRhaW5BdExlYXN0TWluQ2hhcnM6IGJvb2xlYW47XG4gICAgY29udGFpbkF0TGVhc3RPbmVMb3dlckNhc2VMZXR0ZXI6IGJvb2xlYW47XG4gICAgY29udGFpbkF0TGVhc3RPbmVVcHBlckNhc2VMZXR0ZXI6IGJvb2xlYW47XG4gICAgY29udGFpbkF0TGVhc3RPbmVEaWdpdDogYm9vbGVhbjtcbiAgICBjb250YWluQXRMZWFzdE9uZVNwZWNpYWxDaGFyOiBib29sZWFuO1xuICAgIGNvbnRhaW5BdEN1c3RvbUNoYXJzOiBib29sZWFuO1xuICAgIHBhc3N3b3JkRm9ybUNvbnRyb2w6IEZvcm1Db250cm9sO1xuICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uRm9ybUNvbnRyb2w6IEZvcm1Db250cm9sO1xuICAgIHZhbGlkYXRvcnNBcnJheTogVmFsaWRhdG9yRm5bXTtcbiAgICBwcml2YXRlIF9zdHJlbmd0aDtcbiAgICBwcml2YXRlIF9jb2xvcjtcbiAgICBWYWxpZGF0b3JzOiBWYWxpZGF0b3JGbjtcbiAgICBtYXRQYXNzd29yZFN0cmVuZ3RoVmFsaWRhdG9yOiBNYXRQYXNzd29yZFN0cmVuZ3RoVmFsaWRhdG9yO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgZ2V0IHN0cmVuZ3RoKCk6IG51bWJlcjtcbiAgICBnZXQgY29sb3IoKTogVGhlbWVQYWxldHRlO1xuICAgIHByaXZhdGUgX2NvbnRhaW5BdExlYXN0TWluQ2hhcnM7XG4gICAgcHJpdmF0ZSBfY29udGFpbkF0TGVhc3RPbmVMb3dlckNhc2VMZXR0ZXI7XG4gICAgcHJpdmF0ZSBfY29udGFpbkF0TGVhc3RPbmVVcHBlckNhc2VMZXR0ZXI7XG4gICAgcHJpdmF0ZSBfY29udGFpbkF0TGVhc3RPbmVEaWdpdDtcbiAgICBwcml2YXRlIF9jb250YWluQXRMZWFzdE9uZVNwZWNpYWxDaGFyO1xuICAgIHByaXZhdGUgX2NvbnRhaW5DdXN0b21DaGFycztcbiAgICBwYXJzZUN1c3RvbVZhbGlkYXRvcnNSZWdleCh2YWx1ZT86IHN0cmluZyB8IFJlZ0V4cCk6IFJlZ0V4cDtcbiAgICBzZXRSdWxlc0FuZFZhbGlkYXRvcnMoKTogdm9pZDtcbiAgICBjYWxjdWxhdGVQYXNzd29yZFN0cmVuZ3RoKCk6IHZvaWQ7XG4gICAgcmVzZXQoKTogdm9pZDtcbn1cbiJdfQ==